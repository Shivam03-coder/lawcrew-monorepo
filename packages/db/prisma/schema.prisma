generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String?
  userName    String   @unique
  email       String   @unique
  userProfile String?
  password    String
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role UserRole @default(ADMIN)

  Session     Session?
  UserAddress Address?
  TeamAdmin   TeamAdmin?
  TeamMember  TeamMember?
  TeamClient  TeamClient?
}

model Address {
  id        String    @id @default(cuid())
  Zip       String
  city      String
  state     String
  Country   String
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  Opponent  Opponent?
}

model Session {
  id         String   @id @default(cuid())
  sessionKey String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("UserSessions")
}

model TeamAdmin {
  id         String   @id @default(cuid())
  userId     String?  @unique
  user       User?    @relation(fields: [userId], references: [id])
  role       UserRole @default(ADMIN)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())

  cases Case[]
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())

  memberships TeamMembership[]
}

model Opponent {
  id              String   @id @default(cuid())
  title           String?
  firstName       String
  lastName        String
  jobTitle        String?
  emial           String?
  phoneNumber     String?
  addressId       String?  @unique
  opponentAddress Address? @relation(fields: [addressId], references: [id])
  Case            Case?
}

model TeamClient {
  id        String   @id @default(cuid())
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())

  cases Case[]
}

model CaseTag {
  id           String @id @default(cuid())
  label        String
  caseId       String
  practiceArea String
  case         Case   @relation(fields: [caseId], references: [id])

  @@unique([label, caseId])
}

model TeamMembership {
  id           String     @id @default(cuid())
  teamMemberId String
  teamMember   TeamMember @relation(fields: [teamMemberId], references: [id])

  teamId String
  team   Case   @relation(fields: [teamId], references: [id])

  joinedAt DateTime @default(now())

  @@unique([teamMemberId, teamId])
}

model Case {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  practiseArea       PracticeArea   @default(CRIMINAL)
  arrivalDate        DateTime?      @default(now())
  status             CaseStatus     @default(OPEN)
  matterPriority     matterPriority @default(HIGH)
  internalRefNumber  String?
  filedDate          DateTime?
  closedDate         DateTime?
  estimatedCloseDate DateTime?
  stage              CaseStage      @default(RECONCILIATION_COMMITTEE)

  clientId String
  client   TeamClient @relation(fields: [clientId], references: [id])

  adminId String
  admin   TeamAdmin @relation(fields: [adminId], references: [id])

  TeamMembership TeamMembership[]

  opponentId String   @unique
  Opponent   Opponent @relation(fields: [opponentId], references: [id])

  CaseTag      CaseTag[]
  CaseDocument CaseDocument[]
  CaseNote     CaseNote[]
  CaseReminder CaseReminder[]
  CaseInvoice  CaseInvoice[]
  CasePayment  CasePayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CaseDocument {
  id          String   @id @default(cuid())
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id])
  documentUrl String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CaseNote {
  id        String   @id @default(cuid())
  caseId    String
  case      Case     @relation(fields: [caseId], references: [id])
  note      String
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CaseReminder {
  id           String   @id @default(cuid())
  caseId       String
  case         Case     @relation(fields: [caseId], references: [id])
  reminderDate DateTime
  description  String
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CaseInvoice {
  id        String   @id @default(cuid())
  caseId    String
  case      Case     @relation(fields: [caseId], references: [id])
  amount    Float
  status    String
  dueDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CasePayment {
  id          String       @id @default(cuid())
  caseId      String
  case        Case         @relation(fields: [caseId], references: [id])
  amount      Float
  rateType    CaseRateType @default(FIXED)
  paymentDate DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum UserRole {
  ADMIN
  MEMBER
  CLIENT
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  ARCHIVED
  ON_HOLD
}

enum matterPriority {
  LOW
  MEDIUM
  HIGH
}

enum PracticeArea {
  CRIMINAL
  CIVIL
  COMMERCIAL
  ADMINISTRATIVE
  LABOR
  FAMILY
  REAL_ESTATE
  INTELLECTUAL_PROPERTY
  ENVIRONMENTAL
  TAXATION
}

enum OpponentType {
  COMPANY
  PERSON
}

enum CaseStage {
  RECONCILIATION_COMMITTEE
  FIRST_INSTANCE_COURT
  APPEAL_COURT
  CASSATION_HIGH_COURT
  EXECUTION
  UNDER_SETTLEMENT
  SETTLED_CLOSED
  DISPUTE
}

enum CaseRateType {
  HOURLY
  FIXED
}
